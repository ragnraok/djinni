item_list = record {
    items: list<string>;
} deriving (parcel, eq)

another_record = record {
    key1: i32;
    key2: string;
    key3: binary;
    key4: item_list;
    key5: bool;
    key6: map<string, i32>;
    key7: f32;
    key8: f64;
    key9: i64;
    key10: i8;
    key11: i16;
} deriving (parcel, eq)

sort_order = enum {
    ascending;
    descending;
    random;
}

sort_items = interface +c {
    # For the iOS / Android demo
    sort(order: sort_order, items: item_list);
    static create_with_listener(listener: textbox_listener): sort_items;

    # For the localhost / command-line demo
    static run_sort(items: item_list): item_list;
}

super_super_listener = interface +j +o {
    updateSuper();
}

super_listtener: super_super_listener = interface +j +proxy {
    update(items: item_list);
}

textbox_listener: super_listtener = interface +j +o +proxy {
    #update(items: item_list);
    updateNew(items: item_list);

    const version: i32 = 1;
    const stringtest: string = "123123";
}

d_view = interface +j +o +proxy {
    setWidth(w: i32);
    setHeight(h: i32);
}

d_textView: d_view = interface +j +o +proxy {
    setText(text: string);
}

dview_helper = interface +j +o +proxy {
    createDTextView(): d_textView;
}